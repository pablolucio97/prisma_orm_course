====================CREATING ONE TO ONE REALTIONSHIPS==================

1) Create the second table for the relationship. Example:

model Teachers {
  id   String @id @default(uuid())
  name String @unique
  created_at DateTime @default(now())
  @@map("teachers")
}

---------------

2) Run yarn prisma migrate dev and provide a name for your migration 
for create your new table.

---------------

3) In the first table of the relationship, add a column with the name 
of your second table referencing the second table taking "fields" and 
"references" as parameters and also creating a foreign key column. 
Example:

model Courses {
  //generates automatically
  id            String   @id @default(uuid())
  name          String   @unique
  description   String   @unique
  duration      Int
  created_at    DateTime @default(now())
  teacher       Teachers? @relation(fields: [fk_id_teacher], 
                                    references: [id])
  fk_id_teacher String? @unique 

  //table name
  @@map("courses")
}

Obs: If the relationship can be nullable, let these fields as optional

---------------

4) Alter the second table creating a column with the first table 
name rerencing this table. Example:

model Teachers {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  course     Courses?

  @@map("teachers")
}

---------------

5) Run yarn prisma migrate dev and provide a name for your migration 
for create your new table relationship.

---------------

6) Inside your project, insert the data in your table trough the Prisma
Client instance. To insert data with relationship with another table,
you can use the method connectOrCreate (will atach the data in the 
existing table if condition pass), or create (will create the new data) 
or connect (will atach the data in the existing table if condition 
pass), or pass the foreign key directly on the data object. Example:

import {PrismaClient} from '@prisma/client'

const prisma = new PrismaClient()

async function createWithRelation() {
    const result = await prisma.teachers.create({
        data:{
            name: 'Pablo LÃºcio',
            course: {
                connectOrCreate : {
                    where:{
                        name: 'React'
                    },
                    create:{
                        name: 'React 2.0',
                        description: 'React 2.0 description',
                        duration: 300
                    }
                }
            }
        }
    })

    console.log(result)
}

createWithRelation()

---------------

7) To read data from your relationship tables (data from both tables 
together in a single request). In your application instance the 
PrismaClient and use the method "findMany" with "includes" option.
Example:


import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function findWithRelation() {
    const result = await prisma.courses.findMany({
        include: {
            teacher: true
        }
    })

    console.log(result)
}

findWithRelation()





